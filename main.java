import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;
import java.io.IOException;
import java.nio.DoubleBuffer;

public class main {
    public static void main(String[] args) throws IOException{

	// we expect exactly one argument: the name of the input file
	if (args.length!=1) {
	    System.err.println("\n");
	    System.err.println("Simple calculator\n");
	    System.err.println("=================\n\n");
	    System.err.println("Please give as input argument a filename\n");
	    System.exit(-1);
	}
	String filename=args[0];

	// open the input file
	CharStream input = CharStreams.fromFileName(filename);
	    //new ANTLRFileStream (filename); // depricated
	
	// create a lexer/scanner
	simpleCalcLexer lex = new simpleCalcLexer(input);
	
	// get the stream of tokens from the scanner
	CommonTokenStream tokens = new CommonTokenStream(lex);
	
	// create a parser
	simpleCalcParser parser = new simpleCalcParser(tokens);
	
	// and parse anything from the grammar for "start"
	ParseTree parseTree = parser.start();

	// Construct an interpreter and run it on the parse tree
	Interpreter interpreter = new Interpreter();
	Double result=interpreter.visit(parseTree);
	if (result == null)
		System.out.println("You have not chosen any calculation operation!");
	else
	System.out.println("The result is:\t" + result);
    }
}

// We write an interpreter that implements interface
// "simpleCalcVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Double.

class Interpreter extends AbstractParseTreeVisitor<Double> implements simpleCalcVisitor<Double> {
	

    public Double visitStart(simpleCalcParser.StartContext ctx){
		return visit(ctx.e);
	};


    // Input
	public Double visitINPUT(simpleCalcParser.INPUTContext ctx){
		return Double.parseDouble(ctx.input.getText());
	};


	@java.lang.Override
	public Double visitAndenGradsLigning(simpleCalcParser.AndenGradsLigningContext ctx) {
		Double powerOf = Math.pow(visit(ctx.e2), 2);
		Double ac = 4 * visit(ctx.e1) * visit(ctx.e3);
		Double diskriminanten = Math.sqrt(powerOf - ac);
		Double b = visit(ctx.e2);
		if (ctx.op2.getText().equals("-"))
			b = b;
		else if(ctx.op2.getText().equals("+"))
			b = b * (-1);
		Double resultP = b + diskriminanten;
		Double resultN = b - diskriminanten;
		return resultN;
	}

}

